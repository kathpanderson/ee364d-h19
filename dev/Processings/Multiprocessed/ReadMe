Working single-threaded Frequency_Clusterer

Example Exicutable: Python3 ProcessingCaller.py "InputPath" fourChannelMinute 128 128 "OutputPath" processedData 1 1 10 1 10 1 10

Launch with Exicutable using following arguments list.
# arg 0:	path to the labview generated tdms raw data file
# arg 1: 	name of the tdms file
# arg 2:	number of X pixels in spm text
# arg 3:	number of Y pixels in spm text
# arg 4: 	path to save created files
# arg 5: 	name for created files (will be used for csv and video outputs)
# arg 6:	test being ran (0=current, 1=photodetector)
# arg 7: 	tested noise current
# arg 8: 	expected SNR of current
# arg 9: 	tested noise photodetector 1
# arg 10: 	expected SNR of photodetector 1
# arg 11: 	tested noise photodetector 2
# arg 12: 	expected SNR of photodetector 2

Version Notes:
Only one SNR and noise number is used for the photodetector in this version, photodetector 1.
No video is currently made for outputs ~ added in visulization
Modified NormDFT to acomidate sparse dataset
Integrated postion and blocker for ~3X speed as Blocker3.py
Positioning is now filtered with a cutoff of 5 Hz
Y positions are determined avery 50000 X samples for monotonicity in highpass
Bug fixes in position, now circular Y positioning
BlcokedData stored as list of list of list of floats
Cluster outputs are one sell/cluster including (Xpostion, Yposition, Frequency Response)
